#!/usr/bin/env bash
# ~/.macos — https://mths.be/macos
# Modified by Michael Vattuone
# Run without downloading:
# curl https://raw.githubusercontent.com/mvattuone/dotfiles/master/.macos | bash

# Close any open System Preferences panes, to prevent them from overriding
# settings we’re about to change
osascript -e 'tell application "System Preferences" to quit'

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until `.macos` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

###############################################################################
# The Mike Zone
###############################################################################

# Bash Function Helpers
function formulaInstalled {
  if [[ ! $(brew ls --versions "$1") ]]; then 
    if [[ $1 == "universal-ctags" ]]; then
      brew install --HEAD universal-ctags/universal-ctags/universal-ctags
    else
      brew install "$1"; 
    fi
  else
    echo "$1 exists"
  fi 
}

function caskInstalled {
  if [[ ! $(brew cask list --versions "$1") ]]; then 
    brew install --cask "$1" ${2:-}; 
  else 
    echo "$1 already installed, upgrading instead"
    brew upgrade --cask "$1"; 
  fi 
}

echo "Well ${whoami}, it looks like you fucked up again and got a new laptop. Let's save you some time."

CODE_PATH="${HOME}/code"
echo "mkdir -p ${CODE_PATH}"
mkdir -p "${CODE_PATH}"

# Update some OSX software in case a brew package needs it or something
softwareupdate --all --install --force

command -v brew
if [[ $(command -v brew) != 0 ]]; then
  echo "brew installed, updating instead."
  brew update
else
  # Install Homebrew
  echo "installing homebrew"
  # install homebrew https://brew.sh
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
fi

echo "installing git"
# git: Just this little thing I use every one in a while.
formulaInstalled git

if grep -q usr/local/bin/fish /etc/shells; then 
  echo "fish already in /etc/shells, skipping"
else 
  echo "adding /usr/local/bin/fish to /etc/shells"
  echo /usr/local/bin/fish | sudo tee -a /etc/shells
fi

if [ $SHELL = /usr/local/bin/fish ]; then 
  echo "default shell is already set to fish, skipping step"
else  
  echo "setting default shell as fish"
  chsh -s /usr/local/bin/fish
fi

echo "setting up ssh"
eval "$(ssh-agent -s)" 
ssh-add -K ~/.ssh/id_rsa 

if [[ $(test -d "$HOME/.local/share/omf") == 0 ]]; then
  echo "installing oh-my-fish"
  curl -NL https://get.oh-my.fish > install
  fish ./install --noninteractive 
  # remove the config that gets created, we'll symlink our own
  rm -rf ${HOME}/.config
else
  echo "oh-my-fish is already installed"
fi

DOTFILES="${CODE_PATH}/dotfiles"
if [[ ! -d "$DOTFILES" ]]; then
  echo "cloning dotfiles"
  git clone git@github.com:mvattuone/dotfiles.git ${DOTFILES}
else
  echo "looks like dotfiles are already set up, updating"
  git -C $DOTFILES pull
fi

echo "creating symlinks to dotfiles..."
if [[ ! $(test -d "$HOME/.config") == 0 ]]; then
  ln -sf "${DOTFILES}/.config" "${HOME}"
else
  echo "already symlinked ~/.config, skip"
fi
ln -sf "${DOTFILES}/.gitignore_global" "${HOME}/.gitignore_global"
ln -sf "${DOTFILES}/.gitconfig" "${HOME}/.gitconfig" 
ln -sf "${DOTFILES}/tmux/.tmux.conf" "${HOME}/.tmux.conf"
ln -sf "${DOTFILES}/vim/.vimrc" "${HOME}/.vimrc"
ln -sf "${DOTFILES}/brew/Brewfile" "${HOME}/Brewfile"

echo "some vim setup"
VIM_PATH="${HOME}/.vim"
mkdir -p ${VIM_PATH}/backup
mkdir  -p ${VIM_PATH}/undo
mkdir -p ${VIM_PATH}/swap

echo "some tmux setup" 
TMUX_PATH="${HOME}/.tmux"
TPM_PATH="${TMUX_PATH}/plugins/tpm"
if [[ ! -d "$TPM_PATH" ]]; then
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  tmux source ~/.tmux.conf
  # start a server but don't attach to it
  tmux start-server
  # create a new session but don't attach to it either
  tmux new-session -d
  # install the plugins
  ~/.tmux/plugins/tpm/scripts/install_plugins.sh
else
  echo "tpm already set up, skipping"
fi

echo "updating fish config and installing dependencies"
fish -c "omf update"
fish -c "omf install"
fish -c "omf theme bobthefish"

# set up python
pyenv install 3.8.12
eval "$(pyenv init -)" 
pip3 install --user powerline-status 
echo "python version: $(python --version)"

# rbenv for ruby
# i don't use ruby much but sometimes i need it for dependencies
command -v rvm
if [[ $(command -v rvm) != 0 ]]; then
  echo "rvm installed, upgrading instead."
  rvm get stable
else
  echo "setting up rvm for ruby version management"
  curl -sSL https://get.rvm.io | bash -s stable --ruby
fi

echo "rvm --version: $(rvm --version)"

# nodejs
echo "installing node (via n-install)"
curl -L https://git.io/n-install | bash

echo "node --version: $(node --version)"
echo "npm --version: $(npm --version)"

echo "installing a few global npm packages"
npm install --global npm-quick-run \
semantic-release-cli npm-check-updates \
typescript typescript-language-server \
prettier

echo "installing apps via Brewfile"
caskInstalled alfred 
caskInstalled amethyst
caskInstalled iterm2 
caskInstalled google-chrome 
caskInstalled firefox 
caskInstalled itsycal 
caskInstalled 1password 
caskInstalled vlc 
caskInstalled zoom
caskInstalled spotify 
caskInstalled dropbox 
caskInstalled slack 
caskInstalled retroarch 
caskInstalled font-firacode-nerd-font 
caskInstalled docker

echo "handling terminal color stuff"
tic -x ~/code/dotfiles/terminfo/tmux-256color.terminfo
tic -x ~/code/dotfiles/terminfo/xterm-256color-italic.terminfo

echo "making system modifications:"

# Make Chrome Two finger swipe for back and forward
defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool TRUE

# Show battery percentage
defaults write com.apple.menuextra.battery ShowPercent YES

###############################################################################
# Cleanup
###############################################################################

# Remove files generated
rm -rf install

for app in "Activity Monitor" \
  "Address Book" \
  "Calendar" \
  "cfprefsd" \
  "Contacts" \
  "Dock" \
  "Finder" \
  "Mail" \
  "Messages" \
  "Photos" \
  "Safari" \
  "SystemUIServer" \
  "iCal"; do
  killall "${app}" &> /dev/null
done
echo "Done. Note that some of these changes require a logout/restart to take effect."


printf "TODO:\n\
install: \n\
  God I don't even know...
\n\
Import iterm2 config\n\
login to literally everything \n\
"
